npm install @tanstack/react-query @reduxjs/toolkit react-redux axios

// store.ts
import { configureStore } from '@reduxjs/toolkit';
import dataReducer from './dataSlice';

const store = configureStore({
  reducer: {
    data: dataReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;

// dataSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

type Item = {
  id: number;
  title: string;
};

interface DataState {
  searchQuery: string;
  sortKey: string;
  sortOrder: 'asc' | 'desc';
}

const initialState: DataState = {
  searchQuery: '',
  sortKey: 'title',
  sortOrder: 'asc',
};

const dataSlice = createSlice({
  name: 'data',
  initialState,
  reducers: {
    setSearchQuery(state, action: PayloadAction<string>) {
      state.searchQuery = action.payload;
    },
    setSortKey(state, action: PayloadAction<string>) {
      state.sortKey = action.payload;
    },
    setSortOrder(state, action: PayloadAction<'asc' | 'desc'>) {
      state.sortOrder = action.payload;
    },
    toggleSortOrder(state) {
      state.sortOrder = state.sortOrder === 'asc' ? 'desc' : 'asc';
    },
  },
});

export const { setSearchQuery, setSortKey, setSortOrder, toggleSortOrder } = dataSlice.actions;

export default dataSlice.reducer;


// selectors.ts
import { createSelector } from '@reduxjs/toolkit';
import { RootState } from './store';
import { Item } from './dataSlice';

export const selectSearchQuery = (state: RootState) => state.data.searchQuery;
export const selectSortKey = (state: RootState) => state.data.sortKey;
export const selectSortOrder = (state: RootState) => state.data.sortOrder;

export const selectFilteredSortedItems = createSelector(
  [
    (state: RootState, data: Item[]) => data,
    selectSearchQuery,
    selectSortKey,
    selectSortOrder,
  ],
  (items, searchQuery, sortKey, sortOrder) => {
    const filteredItems = items.filter((item: Item) =>
      item.title.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const sortedItems = [...filteredItems].sort((a, b) => {
      const aValue = a[sortKey as keyof Item];
      const bValue = b[sortKey as keyof Item];

      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
      return 0;
    });

    return sortedItems;
  }
);


// Loader.tsx
import React from 'react';

interface LoaderProps<T> {
  isLoading: boolean;
  data: T | undefined;
  loadingComponent: React.ReactNode;
  errorComponent?: React.ReactNode;
  error?: string | null;
  render: (data: T) => React.ReactNode;
}

const Loader = <T,>({ isLoading, data, loadingComponent, error, errorComponent, render }: LoaderProps<T>): React.ReactElement | null => {
  if (isLoading) {
    return <>{loadingComponent}</>;
  }

  if (error) {
    return <>{errorComponent || <p>Error: {error}</p>}</>;
  }

  if (data) {
    return <>{render(data)}</>;
  }

  return null;
};

export default Loader;


// DataList.tsx
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import {
  selectSearchQuery,
  selectSortOrder,
  selectFilteredSortedItems,
} from './selectors';
import {
  setSearchQuery,
  setSortKey,
  toggleSortOrder,
} from './dataSlice';
import Loader from './Loader';
import { RootState } from './store';

type Item = {
  id: number;
  title: string;
};

const fetchItems = async (): Promise<Item[]> => {
  const response = await axios.get<Item[]>('https://jsonplaceholder.typicode.com/posts');
  return response.data;
};

const DataList: React.FC = () => {
  const dispatch = useDispatch();
  const searchQuery = useSelector(selectSearchQuery);
  const sortOrder = useSelector(selectSortOrder);
  const itemsFromState = useSelector((state: RootState) => state.data);

  const { data: items, isLoading, error } = useQuery(['items'], fetchItems);

  const filteredSortedItems = useSelector((state: RootState) => selectFilteredSortedItems(state, items || []));

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    dispatch(setSearchQuery(e.target.value));
  };

  const handleSortChange = (key: string) => {
    dispatch(setSortKey(key));
    dispatch(toggleSortOrder());
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Search..."
        value={searchQuery}
        onChange={handleSearchChange}
      />
      <button onClick={() => handleSortChange('title')}>
        Sort by Title ({sortOrder})
      </button>

      <Loader
        isLoading={isLoading}
        error={error?.message || null}
        data={filteredSortedItems}
        loadingComponent={<p>Loading...</p>}
        render={(data) => (
          <ul>
            {data.map((item) => (
              <li key={item.id}>{item.title}</li>
            ))}
          </ul>
        )}
      />

      {error && <p>Error: {error.message}</p>}
    </div>
  );
};

export default DataList;


// App.tsx
import React from 'react';
import { Provider } from 'react-redux';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import store from './store';
import DataList from './DataList';

const queryClient = new QueryClient();

const App: React.FC = () => (
  <Provider store={store}>
    <QueryClientProvider client={queryClient}>
      <DataList />
    </QueryClientProvider>
  </Provider>
);

export default App;


src/
 ├── App.tsx
 ├── DataList.tsx
 ├── Loader.tsx
 ├── dataSlice.ts
 ├── selectors.ts
 ├── store.ts
